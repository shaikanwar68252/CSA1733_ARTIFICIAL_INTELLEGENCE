from collections import deque

def is_valid(state):
    m, c, b = state
    if m < 0 or c < 0 or m > 3 or c > 3 or (m < c and m > 0) or (m > c and m < 3):
        return False
    return True

def successors(state):
    m, c, b = state
    children = []
    if b == 1:
        children = [(m, c-1, 0), (m-1, c, 0), (m-2, c, 0), (m, c-2, 0), (m-1, c-1, 0)]
    else:
        children = [(m, c+1, 1), (m+1, c, 1), (m+2, c, 1), (m, c+2, 1), (m+1, c+1, 1)]
    return [child for child in children if is_valid(child)]

def bfs():
    start = (3, 3, 1)
    goal = (0, 0, 0)
    queue = deque([[start]])
    visited = set()
    
    while queue:
        path = queue.popleft()
        state = path[-1]
        
        if state == goal:
            return path
        
        for child in successors(state):
            if child not in visited:
                visited.add(child)
                new_path = list(path)
                new_path.append(child)
                queue.append(new_path)

solution = bfs()
for s in solution:
    print(s)
